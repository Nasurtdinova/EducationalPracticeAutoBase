//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MotorDepot
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;

    public partial class RequestDriver
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public RequestDriver()
        {
            this.HistoryClientDriver = new HashSet<HistoryClientDriver>();
        }
    
        public int Id { get; set; }
        public int IdUser { get; set; }

        [Required(ErrorMessage = "Заполните дату!")]
        public Nullable<System.DateTime> Data { get; set; }

        [Required(ErrorMessage = "Заполните количество человек!")]
        public Nullable<int> CountPeople { get; set; }

        [Required(ErrorMessage = "Заполните цену!")]
        public Nullable<double> Price { get; set; }
        public int IdPlaceOfDeparture { get; set; }
        public int IdPlaceOfArrival { get; set; }
        public string Description { get; set; }
        public Nullable<bool> IsDeleted { get; set; }

        public string StringReverse { get; set; }

        public int FreeVenue
        {
            get
            {
                int value = 0;
                foreach (var i in DataAccess.GetHistoriesClientDriver().Where(a => a.IdRequestDriver == Id && a.IdStatus == 3))
                {
                    value += i.CountPeople.Value;
                }
                return CountPeople.Value - value;
            }
        }

        public string VisibilityReverse
        {
            get
            {
                if (MainWindow.CurrentUser.Id == IdUser)
                    return "Collapsed";
                else if (FreeVenue == 0)
                {
                    StringReverse = "Мест нет!";
                    return "Collapsed";
                }
                else if (DataAccess.GetHistoriesClientDriver().Where(a => a.IdRequestDriver == Id && a.IdClient == MainWindow.CurrentUser.Id && a.IdStatus != 2).Count() != 0 && MainWindow.CurrentUser.Id != IdUser)
                {
                    if (DataAccess.GetHistoriesClientDriver().Where(a => a.IdRequestDriver == Id && a.IdClient == MainWindow.CurrentUser.Id && a.IdStatus == 1).Count() != 0)
                        StringReverse = "Вы отправили заявку, ожидайте!";
                    else if (DataAccess.GetHistoriesClientDriver().Where(a => a.IdRequestDriver == Id && a.IdClient == MainWindow.CurrentUser.Id && a.IdStatus == 3).Count() != 0)
                        StringReverse = "Вы уже забронировали место!";
                    else
                        StringReverse = string.Empty;
                    return "Collapsed";
                }
                else
                    return "Visibility";
            }
        }

        public string VisibilityEdit
        {
            get
            {
                if (Data.Value < DateTime.Now)
                    return "Collapsed";
                else
                    return "Visibility";
            }
        }

        public virtual ICollection<HistoryClientDriver> HistoryClientDriverAccept
        {
            get
            {
                return DataAccess.GetHistoriesClientDriver().Where(a => a.RequestDriver.IdUser == MainWindow.CurrentUser.Id && a.IdStatus == 3 && a.IdRequestDriver == Id).ToList();
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<HistoryClientDriver> HistoryClientDriver { get; set; }

        [Required(ErrorMessage = "Заполните место прибытия!")]
        public virtual PlaceArrival PlaceArrival { get; set; }

        [Required(ErrorMessage = "Заполните место отбытия!")]
        public virtual PlaceDeparture PlaceDeparture { get; set; }
        public virtual User User { get; set; }
    }
}
